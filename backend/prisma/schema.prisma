generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Setting {
  id                                      String   @id @default(cuid())
  fqdn                                    String?  @unique
  dualCerts                               Boolean  @default(false)
  minPort                                 Int      @default(9000)
  maxPort                                 Int      @default(9100)
  DNSServers                              String   @default("1.1.1.1,8.8.8.8")
  ipv4                                    String?
  ipv6                                    String?
  arch                                    String?
  concurrentBuilds                        Int      @default(1)
  applicationStoragePathMigrationFinished Boolean  @default(false)
  numberOfDockerImagesKeptLocally         Int      @default(3)
  proxyDefaultRedirect                    String?
  doNotTrack                              Boolean  @default(false)
  sentryDSN                               String?
  previewSeparator                        String   @default(".")
  isAPIDebuggingEnabled                   Boolean  @default(false)
  isRegistrationEnabled                   Boolean  @default(true)
  isAutoUpdateEnabled                     Boolean  @default(false)
  isDNSCheckEnabled                       Boolean  @default(true)
  isTraefikUsed                           Boolean  @default(true)
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt
}

model User {
  id         String       @id @unique @default(cuid())
  email      String       @unique
  password   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  permission Permission[]
}

model Permission {
  id         String   @id @default(cuid())
  userId     String
  permission String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Destination {
  id          String     @id @default(cuid())
  network     String
  name        String     @unique
  engine      String
  isProxyUsed Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Database    Database[]
}

model Database {
  id                  String            @id @default(cuid())
  name                String
  publicPort          Int?
  defaultDatabase     String?
  type                String?
  version             String?
  dbUser              String?
  dbUserPassword      String?
  rootUser            String?
  rootUserPassword    String?
  destinationDockerId String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  destinationDocker   Destination?      @relation(fields: [destinationDockerId], references: [id])
  settings            DatabaseSettings?
  databaseSecret      DatabaseSecret[]
}

model DatabaseSecret {
  id         String   @id @default(cuid())
  name       String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  databaseId String
  database   Database @relation(fields: [databaseId], references: [id])

  @@unique([name, databaseId])
}

model DatabaseSettings {
  id         String   @id @default(cuid())
  databaseId String   @unique
  isPublic   Boolean  @default(false)
  appendOnly Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  database   Database @relation(fields: [databaseId], references: [id])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Setting {
  id                                      String   @id @default(cuid())
  fqdn                                    String?  @unique
  dualCerts                               Boolean  @default(false)
  minPort                                 Int      @default(9000)
  maxPort                                 Int      @default(9100)
  DNSServers                              String   @default("1.1.1.1,8.8.8.8")
  ipv4                                    String?
  ipv6                                    String?
  arch                                    String?
  concurrentBuilds                        Int      @default(1)
  applicationStoragePathMigrationFinished Boolean  @default(false)
  numberOfDockerImagesKeptLocally         Int      @default(3)
  proxyDefaultRedirect                    String?
  doNotTrack                              Boolean  @default(false)
  sentryDSN                               String?
  previewSeparator                        String   @default(".")
  isAPIDebuggingEnabled                   Boolean  @default(false)
  isRegistrationEnabled                   Boolean  @default(true)
  isAutoUpdateEnabled                     Boolean  @default(false)
  isDNSCheckEnabled                       Boolean  @default(true)
  isTraefikUsed                           Boolean  @default(true)
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt
}

model User {
  id         String       @id @unique @default(cuid())
  email      String       @unique
  password   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  permission Permission[]
}

model Permission {
  id         String   @id @default(cuid())
  userId     String
  permission String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Destination {
  id          String     @id @default(cuid())
  network     String
  name        String     @unique
  engine      String
  isProxyUsed Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  databases   Database[]
  services    Service[]
}

model Database {
  id                  String            @id @default(cuid())
  name                String
  publicPort          Int?
  defaultDatabase     String?
  type                String?
  version             String?
  dbUser              String?
  dbUserPassword      String?
  rootUser            String?
  rootUserPassword    String?
  destinationDockerId String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  destinationDocker   Destination?      @relation(fields: [destinationDockerId], references: [id])
  settings            DatabaseSettings?
  databaseSecret      DatabaseSecret[]
}

model DatabaseSecret {
  id         String   @id @default(cuid())
  name       String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  databaseId String
  database   Database @relation(fields: [databaseId], references: [id])

  @@unique([name, databaseId])
}

model DatabaseSettings {
  id         String   @id @default(cuid())
  databaseId String   @unique
  isPublic   Boolean  @default(false)
  appendOnly Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  database   Database @relation(fields: [databaseId], references: [id])
}

model Service {
  id                  String                     @id @default(cuid())
  name                String
  fqdn                String?
  exposePort          Int?
  dualCerts           Boolean                    @default(false)
  type                String?
  version             String?
  templateVersion     String                     @default("0.0.0")
  destinationDockerId String?
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  destinationDocker   Destination?               @relation(fields: [destinationDockerId], references: [id])
  persistentStorage   ServicePersistentStorage[]
  serviceSecret       ServiceSecret[]
  serviceSetting      ServiceSetting[]

  fider              Fider?
  ghost              Ghost?
  glitchTip          GlitchTip?
  hasura             Hasura?
  meiliSearch        MeiliSearch?
  minio              Minio?
  moodle             Moodle?
  plausibleAnalytics PlausibleAnalytics?
  umami              Umami?
  vscodeserver       Vscodeserver?
  wordpress          Wordpress?
  appwrite           Appwrite?
  searxng            Searxng?
  weblate            Weblate?
  taiga              Taiga?
}

model ServicePersistentStorage {
  id          String   @id @default(cuid())
  serviceId   String
  path        String
  volumeName  String?
  predefined  Boolean  @default(false)
  containerId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id])

  @@unique([serviceId, containerId, path])
}

model ServiceSecret {
  id        String   @id @default(cuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])

  @@unique([name, serviceId])
}

model ServiceSetting {
  id           String   @id @default(cuid())
  serviceId    String
  name         String
  value        String
  variableName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  service      Service  @relation(fields: [serviceId], references: [id])

  @@unique([serviceId, name])
}

model PlausibleAnalytics {
  id                   String   @id @default(cuid())
  email                String?
  username             String?
  password             String
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  secretKeyBase        String?
  scriptName           String   @default("plausible.js")
  serviceId            String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}

model Minio {
  id               String   @id @default(cuid())
  rootUser         String
  rootUserPassword String
  publicPort       Int?
  apiFqdn          String?
  serviceId        String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  service          Service  @relation(fields: [serviceId], references: [id])
}

model Vscodeserver {
  id        String   @id @default(cuid())
  password  String
  serviceId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])
}

model Wordpress {
  id                    String   @id @default(cuid())
  extraConfig           String?
  tablePrefix           String?
  ownMysql              Boolean  @default(false)
  mysqlHost             String?
  mysqlPort             Int?
  mysqlUser             String?
  mysqlPassword         String?
  mysqlRootUser         String?
  mysqlRootUserPassword String?
  mysqlDatabase         String?
  mysqlPublicPort       Int?
  ftpEnabled            Boolean  @default(false)
  ftpUser               String?
  ftpPassword           String?
  ftpPublicPort         Int?
  ftpHostKey            String?
  ftpHostKeyPrivate     String?
  serviceId             String   @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  service               Service  @relation(fields: [serviceId], references: [id])
}

model Ghost {
  id                      String   @id @default(cuid())
  defaultEmail            String
  defaultPassword         String
  mariadbUser             String
  mariadbPassword         String
  mariadbRootUser         String
  mariadbRootUserPassword String
  mariadbDatabase         String?
  mariadbPublicPort       Int?
  serviceId               String   @unique
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  service                 Service  @relation(fields: [serviceId], references: [id])
}

model MeiliSearch {
  id        String   @id @default(cuid())
  masterKey String
  serviceId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])
}

model Umami {
  id                   String   @id @default(cuid())
  serviceId            String   @unique
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  umamiAdminPassword   String
  hashSalt             String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}

model Hasura {
  id                   String   @id @default(cuid())
  serviceId            String   @unique
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  graphQLAdminPassword String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}

model Fider {
  id                      String   @id @default(cuid())
  serviceId               String   @unique
  postgresqlUser          String
  postgresqlPassword      String
  postgresqlDatabase      String
  postgresqlPublicPort    Int?
  jwtSecret               String
  emailNoreply            String?
  emailMailgunApiKey      String?
  emailMailgunDomain      String?
  emailMailgunRegion      String   @default("EU")
  emailSmtpHost           String?
  emailSmtpPort           Int?
  emailSmtpUser           String?
  emailSmtpPassword       String?
  emailSmtpEnableStartTls Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  service                 Service  @relation(fields: [serviceId], references: [id])
}

model Moodle {
  id                      String   @id @default(cuid())
  serviceId               String   @unique
  defaultUsername         String
  defaultPassword         String
  defaultEmail            String
  mariadbUser             String
  mariadbPassword         String
  mariadbRootUser         String
  mariadbRootUserPassword String
  mariadbDatabase         String
  mariadbPublicPort       Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  service                 Service  @relation(fields: [serviceId], references: [id])
}

model Appwrite {
  id                      String   @id @default(cuid())
  serviceId               String   @unique
  opensslKeyV1            String
  executorSecret          String
  redisPassword           String
  mariadbHost             String?
  mariadbPort             Int      @default(3306)
  mariadbUser             String
  mariadbPassword         String
  mariadbRootUser         String
  mariadbRootUserPassword String
  mariadbDatabase         String
  mariadbPublicPort       Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  service                 Service  @relation(fields: [serviceId], references: [id])
}

model GlitchTip {
  id                         String   @id @default(cuid())
  postgresqlUser             String
  postgresqlPassword         String
  postgresqlDatabase         String
  postgresqlPublicPort       Int?
  secretKeyBase              String?
  defaultEmail               String
  defaultUsername            String
  defaultPassword            String
  defaultEmailFrom           String   @default("glitchtip@domain.tdl")
  emailSmtpHost              String?  @default("domain.tdl")
  emailSmtpPort              Int?     @default(25)
  emailSmtpUser              String?
  emailSmtpPassword          String?
  emailSmtpUseTls            Boolean  @default(false)
  emailSmtpUseSsl            Boolean  @default(false)
  emailBackend               String?
  mailgunApiKey              String?
  sendgridApiKey             String?
  enableOpenUserRegistration Boolean  @default(true)
  serviceId                  String   @unique
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  service                    Service  @relation(fields: [serviceId], references: [id])
}

model Searxng {
  id            String   @id @default(cuid())
  secretKey     String
  redisPassword String
  serviceId     String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  service       Service  @relation(fields: [serviceId], references: [id])
}

model Weblate {
  id                   String   @id @default(cuid())
  adminPassword        String
  postgresqlHost       String
  postgresqlPort       Int
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  serviceId            String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}

model Taiga {
  id                   String   @id @default(cuid())
  secretKey            String
  erlangSecret         String
  djangoAdminPassword  String
  djangoAdminUser      String
  rabbitMQUser         String
  rabbitMQPassword     String
  postgresqlHost       String
  postgresqlPort       Int
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  serviceId            String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}
